# accum: "stack"
# gcn_output_dim: 500
# embedding_size: 10
# dropout_prob: 0.3
# sparse_feature: True
# class_num: 2
# num_basis_functions: 2

# model config
embedding_size: 32

# dataset config
field_separator: "\t" #指定数据集field的分隔符
seq_separator: " " #指定数据集中token_seq或者float_seq域里的分隔符
USER_ID_FIELD: user_id #指定用户id域
ITEM_ID_FIELD: item_id #指定物品id域
RATING_FIELD: rating #指定打分rating域
TIME_FIELD: timestamp #指定时间域
NEG_PREFIX: neg_ #指定负采样前缀
LABEL_FIELD: label #指定标签域

#因为数据集没有标签，所以设置一个阈值，认为rating高于该值的是正例，反之是负例
threshold:
    rating: 4

#指定从什么文件里读什么列，这里就是从ml-1m.inter里面读取user_id, item_id, rating, timestamp这四列,剩下的以此类推
load_col:
    inter: [user_id, item_id, rating]
    user: [user_id, age, gender, occupation]
    item: [item_id, genre]

# training settings
epochs: 200 #训练的最大轮数
train_batch_size: 2048 #训练的batch_size
learner: adam #使用的pytorch内置优化器
learning_rate: 0.001 #学习率
training_neg_sample_num: 1 #负采样数目
eval_step: 1 #每次训练后做evalaution的次数
stopping_step: 10 #控制训练收敛的步骤数，在该步骤数内若选取的评测标准没有什么变化，就可以提前停止了

# evalution settings
eval_setting: RO_RS #对数据随机重排，设置按比例划分数据集
group_by_user: False #是否将一个user的记录划到一个组里
split_ratio: [0.8,0.1,0.1] #切分比例
metrics: ['AUC', 'LogLoss'] #评测标准
valid_metric: AUC #选取哪个评测标准作为作为提前停止训练的标准
eval_batch_size: 2048 #评测的batch_size

